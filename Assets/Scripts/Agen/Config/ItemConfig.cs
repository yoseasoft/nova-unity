
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;

namespace Game.Config
{
    public sealed partial class ItemConfig : BeanBase
    {
        public ItemConfig(ByteBuf buf)
        {
            id = buf.ReadInt();
            name = buf.ReadString();
            desc = buf.ReadString();
            itemType = (ItemType)buf.ReadInt();
            itemSubType = (ItemSubType)buf.ReadInt();
            price = buf.ReadInt();
            overlap = buf.ReadInt();
            if(buf.ReadBool()){ expireTime = buf.ReadLong(); } else { expireTime = null; }
            quality = (QualityType)buf.ReadInt();
            batchUseable = buf.ReadBool();
            dropable = buf.ReadBool();
            useType = (UseType)buf.ReadInt();
            dailyLimit = buf.ReadInt();
            {int n0 = System.Math.Min(buf.ReadSize(), buf.Size);extParams = new System.Collections.Generic.List<int>(n0);for(var i0 = 0 ; i0 < n0 ; i0++) { int _e0;  _e0 = buf.ReadInt(); extParams.Add(_e0);}}

            PostInit();
        }

        public static ItemConfig DeserializeItemConfig(ByteBuf buf)
        {
            return new ItemConfig(buf);
        }

        /// <summary>
        /// 物品id
        /// </summary>
        public readonly int id;

        /// <summary>
        /// 名称
        /// </summary>
        public readonly string name;

        /// <summary>
        /// 描述
        /// </summary>
        public readonly string desc;

        /// <summary>
        /// 物品类型
        /// </summary>
        public readonly ItemType itemType;

        /// <summary>
        /// 物品子类型
        /// </summary>
        public readonly ItemSubType itemSubType;

        /// <summary>
        /// 物品价格
        /// </summary>
        public readonly int price;

        /// <summary>
        /// 堆叠上限
        /// </summary>
        public readonly int overlap;

        /// <summary>
        /// 过期时间
        /// </summary>
        public readonly long? expireTime;

        /// <summary>
        /// 品质
        /// </summary>
        public readonly QualityType quality;

        /// <summary>
        /// 能否批量使用
        /// </summary>
        public readonly bool batchUseable;

        /// <summary>
        /// 是否可丢弃
        /// </summary>
        public readonly bool dropable;

        /// <summary>
        /// 使用方式
        /// </summary>
        public readonly UseType useType;

        /// <summary>
        /// 每日限制数量
        /// </summary>
        public readonly int dailyLimit;

        /// <summary>
        /// 额外参数
        /// </summary>
        public readonly System.Collections.Generic.List<int> extParams;

        public const int Id = -764023723;

        public override int GetTypeId() => Id;

        public override string ToString()
        {
            return "{ "
            + "id:" + id + ","
            + "name:" + name + ","
            + "desc:" + desc + ","
            + "itemType:" + itemType + ","
            + "itemSubType:" + itemSubType + ","
            + "price:" + price + ","
            + "overlap:" + overlap + ","
            + "expireTime:" + expireTime + ","
            + "quality:" + quality + ","
            + "batchUseable:" + batchUseable + ","
            + "dropable:" + dropable + ","
            + "useType:" + useType + ","
            + "dailyLimit:" + dailyLimit + ","
            + "extParams:" + Luban.StringUtil.CollectionToString(extParams) + ","
            + "}";
        }

        partial void PostInit();
    }
}
